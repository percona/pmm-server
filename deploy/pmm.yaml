# uncomment secret, volumeMounts, volumes to provide certificate
# https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-files-from-a-pod
# provide certs content as values for keys (file names)
#---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: pmm-certs
#   labels:
#     app.kubernetes.io/name: pmm
#     app.kubernetes.io/instance: pmm
#     app.kubernetes.io/component: pmm-server
#     app.kubernetes.io/part-of: percona-platform
#     app.kubernetes.io/version: "2.27.0"
# type: Opaque
# data:
# # ngnix ssl certificates
#     ca-certs.pem:
#     certificate.crt:
#     certificate.key:
#     dhparam.pem:
#
---
apiVersion: v1
kind: Secret
metadata:
  name: pmm-secret
  labels:
    app.kubernetes.io/name: pmm
    app.kubernetes.io/instance: pmm
    app.kubernetes.io/component: pmm-server
    app.kubernetes.io/part-of: percona-platform
    app.kubernetes.io/version: "2.27.0"
type: Opaque
data:
# base64 encoded password
# encode some password: `echo -n "admin" | base64`
# to get the password on deployed cluster: `kubectl get secret pmm-secret -o jsonpath='{.data.PMM_ADMIN_PASSWORD}' | base64 --decode`
  PMM_ADMIN_PASSWORD: "YWRtaW4="

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pmm
  labels:
    app.kubernetes.io/name: pmm
    app.kubernetes.io/instance: pmm
    app.kubernetes.io/component: pmm-server
    app.kubernetes.io/part-of: percona-platform
    app.kubernetes.io/version: "2.27.0"
data:
# environment passed to the PMM
      DISABLE_UPDATES: "1"

---
apiVersion: v1
kind: Service
metadata:
  name: monitoring-service
  labels:
    app.kubernetes.io/name: pmm
    app.kubernetes.io/instance: pmm
    app.kubernetes.io/component: pmm-server
    app.kubernetes.io/part-of: percona-platform
    app.kubernetes.io/version: "2.27.0"
spec:
  type: NodePort
  ports:
    - port: 443
      targetPort: https
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: pmm
    app.kubernetes.io/instance: pmm
    app.kubernetes.io/component: pmm-server
    app.kubernetes.io/part-of: percona-platform

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pmm
  labels:
    app.kubernetes.io/name: pmm
    app.kubernetes.io/instance: pmm
    app.kubernetes.io/component: pmm-server
    app.kubernetes.io/part-of: percona-platform
    app.kubernetes.io/version: "2.27.0"
spec:
  serviceName: monitoring-service
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pmm
      app.kubernetes.io/instance: pmm
      app.kubernetes.io/component: pmm-server
      app.kubernetes.io/part-of: percona-platform
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pmm
        app.kubernetes.io/instance: pmm
        app.kubernetes.io/component: pmm-server
        app.kubernetes.io/part-of: percona-platform
    spec:
      serviceAccountName: pmm-service-account
      containers:
        - name: pmm
          image: "percona/pmm-server:2.27.0"
          imagePullPolicy: Always

          # environment passed to PMM, defined in configMap
          envFrom:
            - configMapRef:
                name: pmm
                optional: true

          # additional secrets that could be used for Grafana iDP
          env:
            - name: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: pmm-secret
                  key: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
                  optional: true
            - name: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: pmm-secret
                  key: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
                  optional: true
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          readinessProbe:
            httpGet:
              path: /v1/readyz
              port: http
          volumeMounts:
            - name: pmm-storage
              mountPath: /srv
            # uncomment secret, volumeMounts, volumes to provide certificate
            # - name: pmm-certs
            #   mountPath: /srv/nginx
            #   readOnly: true
      initContainers: # Execute a set of changes in persistent volume and ensure they are met on each deployment.
        - name: pmm-init
          image: "percona/pmm-server:2.27.0"
          imagePullPolicy: Always
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              set -ex
              # Check if this is a first deployment on empty PV
              if [ ! -f /srv-init/pmm-distribution ]; then

                # set admin password if exists
                if [ ! -v $ADMIN_PASSWORD ]; then
                  set -e
                  #echo "changing admin password..."
                  #change-admin-password $ADMIN_PASSWORD
                  #echo "admin password was changed"
                  set -ex
                fi;

                # Copies /srv from pmm-server into the volume if the volume is empty.
                cp --archive --verbose /srv/* /srv-init

              fi;

          env:
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pmm-secret
                  key: PMM_ADMIN_PASSWORD
                  optional: true

          volumeMounts:
            - name: pmm-storage
              mountPath: /srv-init
      # uncomment secret, volumeMounts, volumes to provide certificate
      # volumes:
      #   - name: pmm-certs
      #     secret:
      #       secretName: pmm-certs
      #       optional: false
  volumeClaimTemplates:
    - metadata:
        name: pmm-storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
