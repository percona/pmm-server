[unix_http_server]
chmod = 0700
username = dummy
password = dummy

[supervisord]
logfile = /srv/logs/supervisord.log
pidfile = /tmp/supervisord.pid
nodaemon = true
nocleanup = false
; TODO childlogdir = /srv/logs/supervisor
user = root
strip_ansi = false

[supervisorctl]
username = dummy
password = dummy

[program:postgresql]
priority = 1
command =
    /usr/pgsql-11/bin/postgres
        -D /srv/postgres
        -c shared_preload_libraries=pg_stat_statements
        -c pg_stat_statements.max=10000
        -c pg_stat_statements.track=all
        -c pg_stat_statements.save=off
user = postgres
autorestart = true
autostart = true
startretries = 3
startsecs = 1
stopsignal = INT  ; Fast Shutdown mode
stopwaitsecs = 300
; postgresql.conf contains settings to log to /srv/logs/postgresql.log,
; so log startup messages only (if any) with supervisord
stdout_logfile = /srv/logs/postgresql.startup.log
stdout_logfile_maxbytes = 1MB
stdout_logfile_backups = 3
redirect_stderr = true

[program:clickhouse]
priority = 2
command = /usr/bin/clickhouse-server --config-file=/etc/clickhouse-server/config.xml
autorestart = true
autostart = true
startretries = 3
startsecs = 1
stopsignal = TERM
stopwaitsecs = 300
; config.xml contains settings to log to /srv/logs/clickhouse-server.log and .err.log,
; so log startup messages only (if any) with supervisord
stdout_logfile = /srv/logs/clickhouse-server.startup.log
stdout_logfile_maxbytes = 1MB
stdout_logfile_backups = 3
redirect_stderr = true

[program:grafana]
priority = 3
command =
    /usr/sbin/grafana-server
        --homepath=/usr/share/grafana
        --config=/etc/grafana/grafana.ini
        cfg:default.paths.data=/srv/grafana
        cfg:default.paths.plugins=/var/lib/grafana/plugins
        cfg:default.paths.logs=/srv/logs
        cfg:default.log.mode=console
        cfg:default.log.console.format=console
        cfg:default.server.root_url="%%(protocol)s://%%(domain)s:%%(http_port)s/graph"
user = grafana
directory = /usr/share/grafana
environment = HOME=/usr/share/grafana
autorestart = true
autostart = true
startretries = 3
startsecs = 1
stopsignal = TERM
stopwaitsecs = 300
stdout_logfile = /srv/logs/grafana.log
stdout_logfile_maxbytes = 10MB
stdout_logfile_backups = 3
redirect_stderr = true

[program:nginx]
priority = 4
command = nginx
autorestart = true
autostart = true
startretries = 3
startsecs = 1
stopsignal = TERM
stopwaitsecs = 10
; nginx.conf contains settings to log to /var/log/nginx/error.log and access.log,
; so log startup messages only (if any) with supervisord
stdout_logfile = /srv/logs/nginx.startup.log
stdout_logfile_maxbytes = 1MB
stdout_logfile_backups = 3
redirect_stderr = true

[program:cron]
priority = 5
command = /usr/sbin/crond -n
autorestart = true
autostart = true
startretries = 3
startsecs = 1
stopsignal = TERM
stopwaitsecs = 10
stdout_logfile = /srv/logs/cron.log
stdout_logfile_maxbytes = 10MB
stdout_logfile_backups = 3
redirect_stderr = true

[program:dashboard-upgrade]
priority = 10
command = /usr/share/percona-dashboards/import-dashboards.py
autorestart = unexpected
exitcodes = 0
autostart = true
startretries = 3
startsecs = 0  ; it can exit quickly if there is nothing to do
stopsignal = TERM
stopwaitsecs = 10
stdout_logfile = /srv/logs/dashboard-upgrade.log
stdout_logfile_maxbytes = 10MB
stdout_logfile_backups = 3
redirect_stderr = true

; [program:clickhouse_exporter]
; priority = 11
; command =
;     /usr/local/percona/pmm-client/clickhouse_exporter
;         -telemetry.address=localhost:9116
; stdout_logfile = /srv/logs/clickhouse_exporter.log
; stderr_logfile = /srv/logs/clickhouse_exporter.log
; autorestart = true

[program:pmm-managed]
priority = 14
command =
    /usr/sbin/pmm-managed
        -prometheus-config=/etc/prometheus.yml
        -prometheus-url=http://127.0.0.1:9090/prometheus
        -postgres-name=pmm-managed
        -postgres-username=pmm-managed
        -postgres-password=pmm-managed
        -supervisord-config-dir=/etc/supervisord.d
autorestart = true
autostart = true
startretries = 1000
startsecs = 1
stopsignal = TERM
stopwaitsecs = 300
stdout_logfile = /srv/logs/pmm-managed.log
stdout_logfile_maxbytes = 10MB
stdout_logfile_backups = 3
redirect_stderr = true

[program:pmm-agent]
priority = 15
command = /usr/sbin/pmm-agent --config-file=/usr/local/percona/pmm2/config/pmm-agent.yaml
autorestart = true
autostart = true
startretries = 1000
startsecs = 1
stopsignal = TERM
stopwaitsecs = 300
stdout_logfile = /srv/logs/pmm-agent.log
stdout_logfile_maxbytes = 10MB
stdout_logfile_backups = 3
redirect_stderr = true

[program:pmm-update-perform]
command = /usr/sbin/pmm-update -perform -playbook=/usr/share/pmm-update/ansible/playbook/tasks/update.yml
directory = /
autorestart = unexpected
exitcodes = 0
autostart = false
startretries = 3
startsecs = 1
stopsignal = TERM
stopwaitsecs = 300
stdout_logfile = /srv/logs/pmm-update-perform.log
stdout_logfile_maxbytes = 50MB
stdout_logfile_backups = 3
redirect_stderr = true
