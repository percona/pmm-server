---
- hosts: all
  become: yes
  gather_facts: yes
  vars:
    data_partition: "/srv"
    create_admin: "true"
    enable_lvm: "true"
  roles:
    - cloud-node
    - lvm-init
    - mysql-init

  tasks:
    - name: Packages                   | Update OS
      when: ansible_os_family == 'RedHat'
      yum:
        name: '*'
        state: latest
        disablerepo: percona-release-x86_64

    - name: Packages                   | Install OS tools
      when: ansible_os_family == 'RedHat'
      yum: name={{ item }} state=installed
      with_items:
        - screen
        - yum-utils
        - cloud-init
        - yum-cron
        - firewalld
        - python2-pip

    - name: cloud-init                 | Create dirs
      file: path={{ item }} state=directory
      with_items:
        - /var/lib/cloud/scripts/per-once
        - /var/lib/cloud/scripts/per-boot
        - /etc/systemd/system/getty@.service.d

    - name: cloud-init                 | Configure yum-cron
      replace:
        dest: /etc/yum/yum-cron-hourly.conf
        regexp: 'update_cmd = default'
        replace: 'update_cmd = minimal-security'

    - name: cloud-init                 | Configure yum-cron
      replace:
        dest: /etc/yum/yum-cron.conf
        regexp: 'update_cmd = default'
        replace: 'update_cmd = minimal-security'

    - name: Percona Server for MySQL   | Start service
      service: name={{ item }} state=started enabled=yes
      with_items:
        - mysqld

    - name: MySQL password             | Generate
      when: not root_mycnf_file.stat.exists
      command: /var/lib/cloud/scripts/per-once/init-mysql-password

    - name: MySQL password             | Remove script
      file:
        path: /var/lib/cloud/scripts/per-once/init-mysql-password
        state: absent

    - name: PMM                        | Add PMM Server YUM repository
      when: ansible_os_family == 'RedHat'
      yum_repository:
        name: pmm
        description: PMM Server YUM repository - x86_64
        baseurl: https://repo.percona.com/pmm/7/RPMS/x86_64/
        gpgcheck: yes
        enabled: no
        gpgkey: file:///etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY

    - name: PMM                        | Add PMM Server YUM repository
      when: ansible_os_family == 'RedHat'
      yum_repository:
        name: pmm-laboratory
        description: PMM Server YUM repository - x86_64
        baseurl: https://repo.percona.com/laboratory/7/RPMS/x86_64/
        gpgcheck: yes
        enabled: no
        gpgkey: file:///etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY

    - name: PMM                        | Install RPMs
      when: ansible_os_family == 'RedHat'
      yum: name={{ item }} state=installed enablerepo=pmm-laboratory
      with_items:
        - nginx
        - percona-consul
        - percona-grafana
        - percona-prometheus
        - percona-prometheus1
        - percona-orchestrator
        - percona-qan-api
        - percona-qan-app
        - percona-toolkit-3.0.10
        - percona-dashboards
        - pmm-server
        - pmm-manage
        - pmm-managed
        - pmm-update
        - pmm-client
        - rds_exporter

    - name: Disable SELinux
      selinux:
        policy: targeted
        state: permissive

    - name: cloud-init                 | Set TELEMETRY_OS
      when: ansible_virtualization_type == "virtualbox"
      lineinfile:
        path: /etc/sysconfig/pmm-managed
        regexp: '^TELEMETRY_OS='
        line: 'TELEMETRY_OS=OVF'

    - name: cloud-init                 | Set TELEMETRY_OS
      when: ansible_virtualization_type == "xen"
      lineinfile:
        path: /etc/sysconfig/pmm-managed
        regexp: '^TELEMETRY_OS='
        line: 'TELEMETRY_OS=AMI'

    - name: cloud-init                 | Set TELEMETRY_OS
      when: ansible_virtualization_type == "kvm"
      lineinfile:
        path: /etc/sysconfig/pmm-managed
        regexp: '^TELEMETRY_OS='
        line: 'TELEMETRY_OS=GCP'

    - name: password-page OVF          | Create /.pmm-ovf file
      when: ansible_virtualization_type == "virtualbox"
      file:
        path: /.pmm-ovf
        owner: root
        group: root
        mode: 0644
        state: touch

    - name: password-page AMI          | Create /.pmm-ami file
      when: ansible_virtualization_type == "xen"
      file:
        path: /.pmm-ami
        owner: root
        group: root
        mode: 0644
        state: touch

    - name: Orchestrator               | Create MySQL database
      mysql_db:
        name: orchestrator
        state: present

    - name: Orchestrator               | Create MySQL user
      mysql_user:
        name: orchestrator
        host: localhost
        password: '*0AD183209365CECFB9275669074B645DFEF2D180'
        priv: 'orchestrator.*:ALL'
        encrypted: yes
        state: present

    - name: pmm-managed                | Create MySQL database
      mysql_db:
        name: pmm-managed
        state: present

    - name: pmm-managed                | Create MySQL user
      mysql_user:
        name: pmm-managed
        host: localhost
        password: '*816FFB19BC44AC2749D546E48FA0DF957EDB2C5A'
        priv: 'pmm-managed.*:ALL'
        encrypted: yes
        state: present

    - name: qan-api                    | Create MySQL database
      mysql_db:
        name: pmm
        state: present
      register: pmm_db

    - name: qan-api                    | Import MySQL database
      when: pmm_db.changed
      mysql_db:
        name: pmm
        state: import
        target: /usr/share/percona-qan-api/schema/pmm.sql

    - name: qan-api                    | Create MySQL user
      mysql_user:
        name: percona
        host: localhost
        password: '*25919B3ABBC2A54904C826DF14F11612455A5FAA'
        priv: 'pmm.*:ALL'
        encrypted: yes
        state: present

    - name: qan-api                    | Create MySQL user for Grafana
      mysql_user:
        name: grafana
        host: localhost
        password: '*58324E2D77A9BBFD9DD1E904649697615FE74649'
        priv: 'pmm.*:SELECT'
        encrypted: yes
        state: present

    - name: PMM                        | Fix nginx config
      replace:
        dest: /etc/nginx/nginx.conf
        regexp: '^(\s*)listen'
        replace: '\1#listen'

    - name: NGINX SSL Certificate      | Add script
      copy:
        content: |
          #!/bin/sh

          set -o errexit

          mkdir -p /srv/nginx

          if [ ! -e /srv/nginx/dhparam.pem ]; then
              openssl dhparam -out /srv/nginx/dhparam.pem 2048
          fi

          if [ ! -e /srv/nginx/ca-certs.pem ]; then
              # Fetch letsencrypt chain
              curl https://letsencrypt.org/certs/isrgrootx1.pem                          > /srv/nginx/ca-certs.pem
              curl https://letsencrypt.org/certs/lets-encrypt-x1-cross-signed.pem       >> /srv/nginx/ca-certs.pem
              curl https://letsencrypt.org/certs/letsencryptauthorityx1.pem             >> /srv/nginx/ca-certs.pem
              curl https://www.identrust.com/certificates/trustid/root-download-x3.html >> /srv/nginx/ca-certs.pem
          fi

          if [ ! -e /srv/nginx/certificate.conf ]; then
              echo "
          [ req ]
          distinguished_name = req_distinguished_name
          prompt             = no

          [ req_distinguished_name ]
          O                  = Main Org.
          " > /srv/nginx/certificate.conf
          fi

          if [ ! -e /srv/nginx/certificate.key -o ! -e /srv/nginx/certificate.crt ]; then
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                  -keyout /srv/nginx/certificate.key \
                  -out    /srv/nginx/certificate.crt \
                  -config /srv/nginx/certificate.conf
          fi
        dest: /var/lib/cloud/scripts/per-boot/generate-ssl-certificate
        mode: 0755

    - name: NGINX SSL Certificate      | Check certificate file
      stat: path=/srv/nginx/certificate.crt
      register: certificate_file

    - name: NGINX SSL Certificate      | Generate certificate
      when: not certificate_file.stat.exists
      command: /var/lib/cloud/scripts/per-boot/generate-ssl-certificate

    - name: NGINX                      | Restart on failure
      ini_file:
        dest: /usr/lib/systemd/system/nginx.service
        section: Service
        option: Restart
        value: on-failure

    - name: NGINX                      | Restart on failure
      ini_file:
        dest: /usr/lib/systemd/system/nginx.service
        section: Service
        option: RestartSec
        value: 10s

    - name: Grafana                    | Check data dir
      stat: path=/srv/grafana/grafana.db
      register: grafana_db

    - name: Grafana                    | Enable Anonymous access
      when: not grafana_db.stat.exists
      ini_file:
        dest: /etc/grafana/grafana.ini
        section: auth.anonymous
        option: enabled
        value: true

    - name: Grafana                    | Enable Anonymous access
      when: not grafana_db.stat.exists
      ini_file:
        dest: /etc/grafana/grafana.ini
        section: auth.anonymous
        option: org_role
        value: Editor

    - name: Grafana                    | Set snapshot server
      when: not grafana_db.stat.exists
      ini_file:
        dest: /etc/grafana/grafana.ini
        section: snapshots
        option: external_enabled
        value: true

    - name: Grafana                    | Set snapshot server
      when: not grafana_db.stat.exists
      ini_file:
        dest: /etc/grafana/grafana.ini
        section: snapshots
        option: external_snapshot_url
        value: https://snapshots-g635.percona.com/graph/

    - name: Grafana                    | Set snapshot server
      when: not grafana_db.stat.exists
      ini_file:
        dest: /etc/grafana/grafana.ini
        section: snapshots
        option: external_snapshot_name
        value: Share with Percona

    - name: PMM                        | Start services
      service: name={{ item }} state=started enabled=yes
      with_items:
        - grafana-server
        - consul
        - node_exporter
        - prometheus
        - prometheus1
        - percona-qan-api
        - pmm-manage
        - pmm-managed
        - nginx

    - name: PMM                        | Check dashboards version
      stat: path=/srv/grafana/PERCONA_DASHBOARDS_VERSION
      register: dashboards_file

    - name: PMM                        | Wait for Grafana start
      wait_for:
        port: 3000
        state: present
        delay: 30
        timeout: 60

    - name: PMM                        | Import dashboards
      when: not dashboards_file.stat.exists
      command: /usr/share/percona-dashboards/import-dashboards.py /srv/grafana

    - name: PMM                        | Add firewalld rule
      when: ansible_os_family == 'RedHat'
      firewalld: port={{ item }} permanent=true state=enabled immediate=yes
      with_items:
          - 80/tcp
          - 443/tcp

    - name: PMM                        | Add script which show PMM URL
      copy:
        content: |
          #!/bin/sh

          set -o errexit

          PATH=/bin:/sbin

          SOURCE=$(
              cat /var/lib/cloud/data/status.json 2>/dev/null \
                  | python -c 'import json, sys; print json.load(sys.stdin)["v1"]["datasource"];' 2>/dev/null
          )

          IP=$(ip route get 1 2>/dev/null | awk '{print $NF;exit}')
          if [ "x$SOURCE" = "xDataSourceEc2" ]; then
              IP=$(curl --connect-timeout 5 -s http://169.254.169.254/latest/meta-data/public-ipv4)
          fi
          if [ -z "$IP" ]; then
              IP=$(ip addr show up | grep 'inet ' | awk '{print$2}' | cut -d '/' -f 1 | grep -v '^127.')
          fi

          echo "

          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                Percona Monitoring and Management           https://${IP}/

          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          " | tee -a /dev/tty0
        dest: /var/lib/cloud/scripts/per-boot/show-pmm-url
        mode: 0755

    - name: PMM                        | Create pmm-update dirs
      file: path={{ item }} state=directory
      with_items:
        - /srv/update

    - name: PMM                        | Check pmm-update
      stat: path=/srv/update/main.yml
      register: pmm_update_file

    - name: PMM                        | Enable testing repo for pmm-client and percona-toolkit
      when: not pmm_update_file.stat.exists
      command: percona-release enable tools testing

    - name: PMM                        | Run pmm-update
      when: not pmm_update_file.stat.exists
      command: env EXTRA_ARGS='--extra-vars image_creation=1 --extra-vars keep_centos_user=1' /usr/bin/pmm-update-stage2

    - name: PMM                        | Enable testing repo for pmm-client and percona-toolkit
      when: not pmm_update_file.stat.exists
      command: percona-release disable tools testing

    - name: PMM                        | Start services
      service: name={{ item }} state=stopped enabled=yes
      with_items:
        - grafana-server
        - consul
        - node_exporter
        - prometheus
        - prometheus1
        - percona-qan-api
        - pmm-manage
        - pmm-managed
        - nginx

    - name: PMM                        | Cleanup data dirs
      file: path={{ item }} state=absent
      with_items:
        - /srv/consul
        - /srv/prometheus
        - /srv/prometheus2
        - /srv/collect_info

    - name: PMM                        | Create tmp dirs
      command: /usr/bin/systemd-tmpfiles --create --remove --boot --exclude-prefix=/dev

    - name: PMM                        | Find the main js file
      find:
        paths: "/usr/share/pmm-server/password-page"
        patterns: "main.*.js"
      register: jsresult

    - name: PMM                        | Switch password-page type
      when: ansible_virtualization_type == "virtualbox"
      replace:
        dest: "{{ jsresult.files[0].path }}"
        regexp: "installationType: 'docker'"
        replace: "installationType: 'ovf'"
      with_items: "{{ jsresult.files }}"

    - name: PMM                        | Switch password-page type
      when: ansible_virtualization_type == "xen"
      replace:
        dest: "{{ jsresult.files[0].path }}"
        regexp: "installationType: 'docker'"
        replace: "installationType: 'ami'"
      with_items: "{{ jsresult.files }}"

    - name: PMM                        | Delete centos
      shell: cd /tmp; nohup sh -c "trap 'userdel -r centos' EXIT; sleep 600" </dev/null >/dev/null 2>&1 &

    - name: PMM                        | Delete vagrant
      shell: cd /tmp; nohup sh -c "trap 'userdel -r vagrant' EXIT; sleep 600" </dev/null >/dev/null 2>&1 &

    - name: PMM                        | Delete Azure user
      shell: cd /tmp; nohup sh -c "trap '/usr/sbin/waagent -force -deprovision+user && sync' EXIT; sleep 600" </dev/null >/dev/null 2>&1 &

    - name: cloud-init                 | Cleanup security logs
      file: path={{ item }} state=absent
      with_items:
        - /var/log/secure
        - /var/log/wtmp
